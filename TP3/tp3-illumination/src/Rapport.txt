Q1: L'implantation du modèle d'illumination de Lambert selon ce qui est
    proposé dans le TP est bien dans un contexte académique, mais elle n'est
    pas très efficace. Dites ce qui pourrait être amélioré et comment vous
    modifieriez le programme actuel afin d'avoir une meilleure implantation.

 
On pourrait effectuer le calcul de la normale par surface dans le nuanceur de fragment. En effet, plutôt que de calculer la normale par face dans le nuanceur de géométrie, on pourrait simplement utiliser l'attribut AttribsIn.lumiDir pour calculer la normale de chaque face.
Pour faire cela, on écrira dans le nuanceur de fragments :
    if (typeIllumination == 0){ //Illumination de Lambert
	vec3 X = dFdx(AttribsIn.lumiDir);
	vec3 Y = dFdy(AttribsIn.lumiDir);
	normal = normalize(cross(X,Y));
    }

Cela aura pour effet d'obtenir le vecteur normal à chaque face pour chaque fragment (les vecteurs X et Y sont tangents à la face, donc le produit vectoriel de ceux-ci donnera la normale à la face). Les fonctions dFdx et dFdy calculent la dérivée en X/Y du vecteur de lumière par rapport au fragment, ce qui donne la "direction" dans laquelle est dessinée le reste de la face (les autres fragments). Cela n'améliorera pas les performances cependant on regrouperait le traitement des normales dans un seul nuanceur.

Q2: On pourrait vouloir que la texture de l'échiquier se « déplace » sur
    l'objet en fonction du temps, comme si elle glissait sur la surface dans
    une direction donnée. Comment implanteriez-vous cette fonctionnalité?


Pour cela j'utiliserais une matrice de transformation ( dans mon main.cpp en tant que variable uniforme), qui me servirait à effectuer des transformations sur mes coordonnées de textures en fonction du temps. Dans le nuanceur de sommets, on modifie l'attribut de sortie texCoord en le multipliant par cette matrice afin de déplacer mes coordonnées de texture. Ainsi, on aurait une impression de mouvement sur les coordonnés de ma texture.
